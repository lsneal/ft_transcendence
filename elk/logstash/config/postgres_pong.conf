input {
  jdbc{
    jdbc_connection_string => "jdbc:postgresql://postgres_pong:5433/postgres"
    jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.7.1.jar"
    jdbc_user => "devops"
    jdbc_password => "${DATABASE_PONG}"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_paging_enabled => true
    tracking_column => "unix_ts_in_secs"
    use_column_value => true
    tracking_column_type => "numeric"
    schedule => "*/59 * * * * *"
    statement => "SELECT *, EXTRACT(EPOCH FROM modification_game) AS unix_ts_in_secs FROM public.game_game 
    WHERE (EXTRACT(EPOCH FROM modification_game) > :sql_last_value AND modification_game < NOW()) 
    ORDER BY modification_game ASC"
  }
  jdbc{
    jdbc_connection_string => "jdbc:postgresql://postgres_pong:5433/postgres"
    jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.7.1.jar"
    jdbc_user => "devops"
    jdbc_password => "${DATABASE_PONG}"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_paging_enabled => true
    tracking_column => "unix_ts_in_secs"
    use_column_value => true
    tracking_column_type => "numeric"
    schedule => "*/59 * * * * *"
    statement => "SELECT *, EXTRACT(EPOCH FROM creation_tournament) AS unix_ts_in_secs FROM public.game_tournamentgame 
    WHERE (EXTRACT(EPOCH FROM creation_tournament) > :sql_last_value AND creation_tournament < NOW()) 
    ORDER BY creation_tournament ASC"
  }
}

filter {
  mutate {
    copy => { "user_id" => "[@metadata][_id]"}
    remove_field => ["id", "@version", "unix_ts_in_secs"]
  }
}

output {
  elasticsearch {
    hosts => ["https://es01:9200"]
    data_stream => auto
    user => "elastic"
    password => "${ELASTIC_PASSWORD}"
    index => "postgres_pong-%{+YYYY.MM.dd}"
    ssl_enabled => true
    ssl_certificate_authorities => "/usr/share/logstash/config/certs/ca/ca.crt"
  }

  #stdout {
  #  codec => rubydebug
  #}
}