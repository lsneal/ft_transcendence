version: "3.8"

services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - vault_elastic:/opt
      - ./entrypoint/setup_entrypoint.sh:/setup_entrypoint.sh
    user: "0"
    networks:
      - elk
      - vault_network
    entrypoint: ["bash", "/setup_entrypoint.sh"]
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 5s
      timeout: 5s
      retries: 10

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
      - vault_elastic:/opt
      - ./entrypoint/docker-entrypoint.sh:/usr/local/bin/docker-entrypoint.sh
    networks:
      - elk
      - vault_network
    expose:
      - 9200
    restart: always
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/es01/es01.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 15s
      timeout: 10s
      retries: 10

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    container_name: kibana
    build: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
      - vault_kibana:/opt
    networks:
      - elk
      - nginx
      - vault_network
    restart: always
    expose:
      - 5601
    environment:
      - SERVERNAME=kibana
      - xpack.reporting.roles.enabled=false
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 5
  
  logstash:
    depends_on:
      kibana:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}    
    user: "1000"
    volumes:  
      - certs:/usr/share/logstash/config/certs
      #- ./postgresql-42.7.1.jar:/usr/share/logstash/logstash-core/lib/jars/postgresql-42.7.1.jar
      - ./nginx:/usr/share/logstash/pattern/nginx:ro
      - ./logstash/:/usr/share/logstash/pipeline/:ro
      - logstashdata:/usr/share/logstash/data
      - nginx_logs:/var/log/nginx
      - ./entrypoint/logstash_entrypoint:/logstash_entrypoint
      - vault_logstash:/opt
    labels:
      co.elastic.logs/module: logstash
    restart: always
    networks:
      - elk
      #- users_network
      - vault_network
    expose:
      - 5044/udp
    environment:
      - NODE_NAME=logstash
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_HOSTS=https://es01:9200
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    entrypoint: ["bash", "/logstash_entrypoint"]
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:9600",
        ]
      interval: 10s
      timeout: 10s
      retries: 5
  
volumes:
  certs:
    name: "certs"
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  logstashdata:
    driver: local

networks:
  elk:
    driver: bridge  
